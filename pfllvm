#!/bin/bash
# Copyright (C) 2018 PureFusionOS == PureFusionTC == PureFusionLLVM
#
# Licensed under the Apache License, Version 2.0 (the "License");
#   You may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Define Color Values
red=$(tput setaf 1) # red
grn=$(tput setaf 2) # green
blu=$(tput setaf 4) # blue
cya=$(tput setaf 6) # cyan
txtbld=$(tput bold) # Bold
bldred=${txtbld}$(tput setaf 1) # red
bldgrn=${txtbld}$(tput setaf 2) # green
bldblu=${txtbld}$(tput setaf 4) # blue
bldcya=${txtbld}$(tput setaf 6) # cyan
txtrst=$(tput sgr0) # Reset

###########################################################################
###########################################################################
#####                                                                 #####
#####      P U R E F U S I O N L L V M  B U I L D  S Y S T E M S      #####
#####                          (C) 2018                               #####
###########################################################################
###########################################################################

# Find Host OS and set OS specific variables
IS_DARWIN=$(uname -a | grep Darwin)
if [ -n "$IS_DARWIN" ]; then
  CPUS=$(sysctl hw.ncpu | awk '{print $2}')
  DATE=gdate
else
  CPUS=$(grep "^processor" /proc/cpuinfo | wc -l)
  DATE=date
fi;

# Optimize CPU Threads
JOBS=$(bc <<< "$CPUS+2");

# Set Prefix Path
PREFIX_PATH=$TOOLCHAIN_ROOT/out/clang_linux-x86_${PFLLVM_VERSION}.x

alias popd="popd > /dev/null"
alias pushd="pushd > /dev/null"

# Function to clean tree
clean() {
  if [ -d $TOOLCHAIN_ROOT/cmake ];
  then
    rm -rf $TOOLCHAIN_ROOT/cmake;
  fi;

  if [ -d "$PREFIX_PATH" ];
  then
 #   mv $PREFIX_PATH ${PREFIX_PATH}.old
	rm -rf $PREFIX_PATH
    mkdir -p $PREFIX_PATH;
    echo "NOTE: Not Empty, Deleted OLD";
  else
    mkdir -p $PREFIX_PATH;
  fi;
  }
  
clean() {
  echo "NOTE: Cleaning OLD Directorys:"
  if [ -d $TOOLCHAIN_ROOT/cmake ]; then
    rm -rf $TOOLCHAIN_ROOT/cmake;
  fi;
  if [ -d "$PREFIX_PATH" ]; then
    rm -rf $PREFIX_PATH;
    mkdir -p $PREFIX_PATH;
    echo "WARNING: $PREFIX_PATH Not Empty, Cleaning.."
  else
    mkdir -p $PREFIX_PATH;
  fi;
}

syncA() {
 cd $TOOLCHAIN_ROOT;
  pushd llvm && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd ;
  pushd llvm/tools/clang && rm -rf * && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
  pushd llvm/tools/lld && rm -rf * && git fetch $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
  pushd llvm/tools/polly && rm -rf * && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
  pushd llvm/projects/compiler-rt && rm -rf * && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
  pushd llvm/projects/libcxx && rm -rf * && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
  pushd llvm/projects/libcxxabi && rm -rf * && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
  pushd llvm/projects/libunwind && rm -rf * && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
  pushd llvm/projects/openmp && rm -rf * && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
  pushd lvm/tools/clang/tools/extra && rm -rf * && git fetch llvm $PFLLVM_BRANCH && git reset --hard FETCH_HEAD && popd;
}
  
finalize() {
  # Copy toolchain makefiles
  cp $TOOLCHAIN_ROOT/prebuilts/makefiles/PureFusionLLVM-$PFLLVM_VERSION.mk $PREFIX_PATH/PureFusionLLVM.mk;
  current_date=$(date "+%Y%m%d");
  echo "$PFLLVM_VERSION-PureFusionLLVM-$current_date" >> $PREFIX_PATH/VERSION;

  # Copy AOSP prebuilt files
  cp -R $TOOLCHAIN_ROOT/prebuilts/aosp_prebuilts/libclang/** $PREFIX_PATH/lib64/clang/$PFLLVM_LIB_VERSION/lib/linux/;
  # Copy stdatomic from bionic
  cp $TOOLCHAIN_ROOT/prebuilts/aosp_prebuilts/stdatomic.h $PREFIX_PATH/lib64/clang/$PFLLVM_LIB_VERSION/include/stdatomic.h;
  cd $TOOLCHAIN_ROOT/out/$PFLLVM_VERSION/lib64/clang; ln -s $PFLLVM_LIB_VERSION $DTC_VERSION; cd $TOOLCHAIN_ROOT/build

  # Copy libfuzzer headers
  cp -R $TOOLCHAIN_ROOT/prebuilts/aosp_prebuilts/prebuilt_include $PREFIX_PATH/prebuilt_include;

  # Copy Android tests
  cp -R $TOOLCHAIN_ROOT/prebuilts/aosp_prebuilts/test $PREFIX_PATH/test;

  whereami=$PWD
  $TOOLCHAIN_ROOT/scripts/cleanbinaries $whereami $PREFIX_PATH
  $TOOLCHAIN_ROOT/scripts/stripbinaries $whereami $PREFIX_PATH $PFLLVM_VERSION
}

# Function to build LLVM
build() {

# Speed up build with gold
export LD="ld.gold"

# Build date
export revision_date=$(date "+%Y%m%d");

# Concatenate all flags
COMMON_CXX_FLAGS="-O3 -Wno-macro-redefined -Wno-strict-aliasing -DNDEBUG -pipe -pthread -fopenmp -g0 $OPT $LOCAL_CXX_FLAGS"
COMMON_C_FLAGS="-O3 -Wno-macro-redefined -Wno-strict-aliasing -DNDEBUG -pipe -pthread -fopenmp -g0 $OPT $LOCAL_C_FLAGS"

# Configure LLVM with CMAKE
mkdir $TOOLCHAIN_ROOT/cmake;
cd $TOOLCHAIN_ROOT/cmake;
export LLVM_ENABLE_ABI_BREAKING_CHECKS=0
				 
cmake .. -G Ninja \
    -DLINK_POLLY_INTO_TOOLS:BOOL=ON \
    -DCMAKE_C_COMPILER=$CC \
    -DCMAKE_CXX_COMPILER=$CXX \
    -DCMAKE_CXX_FLAGS:STRING="$COMMON_CXX_FLAGS" \
    -DCMAKE_C_FLAGS:STRING="$COMMON_C_FLAGS" \
    -DLLVM_ENABLE_PIC:BOOL=ON \
    -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX_PATH \
    -DLLVM_PARALLEL_COMPILE_JOBS=$JOBS \
    -DLLVM_PARALLEL_LINK_JOBS=$JOBS \
    -DLLVM_ENABLE_THREADS:BOOL=ON \
    -DLLVM_ENABLE_WARNINGS:BOOL=OFF \
    -DLLVM_ENABLE_WERROR:BOOL=OFF \
    -DLLVM_BUILD_DOCS:BOOL=OFF \
    -DLLVM_BUILD_DOXYGEN:BOOL=OFF \
    -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
    -DLLVM_INCLUDE_TESTS:BOOL=OFF \
    -DLLVM_BINUTILS_INCDIR:PATH=$TOOLCHAIN_ROOT/llvm/tools/binutils/include \
    -DLLVM_TARGETS_TO_BUILD:STRING="AArch64;ARM;X86" \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
    -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
    -DLLVM_LIBDIR_SUFFIX:STRING=64 \
    -DLLVM_ENABLE_LLD:BOOL=$PFLLVM_USE_LLD \
    -DLLVM_ENABLE_LTO:STRING=$PFLLVM_USE_THINLTO \
    -DLLVM_CCACHE_BUILD:BOOL=$PFLLVM_CCACHE \
    -DLLVM_CCACHE_DIR:DIR=$CCACHE_DIR \
    -DLLVM_CCACHE_MAXSIZE=$CCACHE_MAXSIZE \
    -DCLANG_VENDOR:STRING=PureFusionLLVM \
    -DCLANG_TC_DATE:STRING="$revision_date" $TOOLCHAIN_ROOT/llvm;
  
  # Find Time Before Build
  START_TIME=$($DATE +%s);

# Build LLVM
if ! time cmake --build . -- -j$JOBS; then
  echo "";
  echo -e ${red} "*************************************" ${txtrst};
  echo -e ${red} "      ______      _ __         ____" ${txtrst};
  echo -e ${red} "     / ____/___ _(_) /__  ____/ / /" ${txtrst};
  echo -e ${red} "    / /_  / __ '/ / / _ \/ __  / /" ${txtrst};
  echo -e ${red} "   / __/ / /_/ / / /  __/ /_/ /_/" ${txtrst};
  echo -e ${red} "  /_/    \__,_/_/_/\___/\__,_/_/ " ${txtrst};
  echo -e ${red} "" ${txtrst};
  echo -e ${red} "   PureFusionLLVM has failed to compile!" ${txtrst};
  echo -e ${red} "*************************************" ${txtrst};
  exit 1;
else
  cmake --build . --target install -- -j$JOBS;
  finalize;
  # Echo Time if Build Finishes
  END_TIME=$($DATE +%s);
  tmin=$(( (END_TIME-START_TIME)/60 ));
  tsec=$(( (END_TIME-START_TIME)%60 ));
  echo -e "";
  echo -e ${grn} "*****************************************************" ${txtrst};
  echo -e ${grn} "     ______                      __     __       __" ${txtrst};
  echo -e ${grn} "    / ____/___  ____ ___  ____  / /__  / /____  / /" ${txtrst};
  echo -e ${grn} "   / /   / __ \/ __ '__ \/ __ \/ / _ \/ __/ _ \/ /" ${txtrst};
  echo -e ${grn} "  / /___/ /_/ / / / / / / /_/ / /  __/ /_/  __/_/" ${txtrst};
  echo -e ${grn} "  \____/\____/_/ /_/ /_/ .___/_/\___/\__/\___(_) " ${txtrst};
  echo -e ${grn} "                      /_/" ${txtrst};
  echo -e ${grn} "" ${txtrst};
  echo -e ${grn} "    PureFusionLLVM has compiled successfully!" ${txtrst};
  echo -e ${grn} "*****************************************************" ${txtrst};
  echo -e  "";
  echo -e ${bldgrn}"Total time elapsed:${txtrst} ${grn}$tmin minutes $tsec seconds"${txtrst};
  echo -e ${bldgrn}"Toolchain located at:${txtrst} ${grn}$PREFIX_PATH"${txtrst};
fi;

# Unset Local Variables
unset TOOLCHAIN_ROOT;
unset PFLLVM_BRANCH;
unset PFLLVM_VERSION;
unset PREFIX_PATH;
unset OPT;
unset LOCAL_CXX_FLAGS;
unset LOCAL_C_FLAGS;
unset CC;
unset CXX;
unset LD;
}

clean;
#syncA;
build;
